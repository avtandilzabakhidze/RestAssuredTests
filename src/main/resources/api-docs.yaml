openapi: 3.0.1
info:
  title: Spring Security 6+ APP
  description: Spring Boot 3+ Spring Security 6+ example
  version: 0.0.1-SNAPSHOT
servers:
- url: http://localhost:8086
  description: Development
security:
- bearerAuth: []
tags:
- name: Authentication
  description: "The Authentication API. Contains operations like login, logout, refresh-token\
    \ etc."
- name: Authorization
  description: The Authorization API. Contains a secure hello method
paths:
  /api/v1/user/resource:
    put:
      tags:
      - Authorization
      operationId: sayHelloWithRoleUserAndUpdateAuthority
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - type: object
                  additionalProperties:
                    type: string
                - type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
    post:
      tags:
      - Authorization
      operationId: sayHelloWithRoleUserAndCreateAuthority
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - type: object
                  additionalProperties:
                    type: string
                - type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/v1/auth/register:
    post:
      tags:
      - Authentication
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - type: object
                  additionalProperties:
                    type: string
                - type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
      security: []
  /api/v1/auth/refresh-token:
    post:
      tags:
      - Authentication
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - type: object
                  additionalProperties:
                    type: string
                - type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
      security: []
  /api/v1/auth/refresh-token-cookie:
    post:
      tags:
      - Authentication
      operationId: refreshTokenCookie
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - type: object
                  additionalProperties:
                    type: string
                - type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
      security: []
  /api/v1/auth/logout:
    post:
      tags:
      - Authentication
      operationId: logout
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - type: object
                  additionalProperties:
                    type: string
                - type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
      security: []
  /api/v1/auth/authenticate:
    post:
      tags:
      - Authentication
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - type: object
                  additionalProperties:
                    type: string
                - type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
  /api/v1/auth/info:
    get:
      tags:
      - Authentication
      operationId: getAuthentication
      parameters:
      - name: request
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - type: object
                  additionalProperties:
                    type: string
                - type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content: {}
      security: []
  /api/v1/admin/resource:
    get:
      tags:
      - Authorization
      summary: Hello secured endpoint
      description: "This endpoint require a valid JWT, ADMIN role with READ_PRIVILEGE"
      operationId: sayHelloWithRoleAdminAndReadAuthority
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - type: object
                  additionalProperties:
                    type: string
                - type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: Success
          content:
            '*/*':
              schema:
                type: string
        "401":
          description: Unauthorized / Invalid Token
          content:
            '*/*':
              schema:
                type: string
    delete:
      tags:
      - Authorization
      operationId: sayHelloWithRoleAdminAndDeleteAuthority
      responses:
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                oneOf:
                - type: object
                  additionalProperties:
                    type: string
                - type: string
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        error:
          type: string
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        path:
          type: string
    RegisterRequest:
      required:
      - email
      - firstname
      - lastname
      - password
      - role
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
          - ADMIN
          - USER
    AuthenticationResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        roles:
          type: array
          items:
            type: string
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
    RefreshTokenResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
    ContentDisposition:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        filename:
          type: string
        charset:
          type: string
        size:
          type: integer
          format: int64
          deprecated: true
        creationDate:
          type: string
          format: date-time
          deprecated: true
        modificationDate:
          type: string
          format: date-time
          deprecated: true
        readDate:
          type: string
          format: date-time
          deprecated: true
        inline:
          type: boolean
        formData:
          type: boolean
        attachment:
          type: boolean
    HttpMethod:
      type: object
    HttpRange:
      type: object
    HttpStatusCode:
      type: object
      properties:
        error:
          type: boolean
        is5xxServerError:
          type: boolean
        is4xxClientError:
          type: boolean
        is2xxSuccessful:
          type: boolean
        is1xxInformational:
          type: boolean
        is3xxRedirection:
          type: boolean
    MediaType:
      type: object
      properties:
        type:
          type: string
        subtype:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        qualityValue:
          type: number
          format: double
        charset:
          type: string
        concrete:
          type: boolean
        wildcardType:
          type: boolean
        wildcardSubtype:
          type: boolean
        subtypeSuffix:
          type: string
    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
          format: int32
        detail:
          type: string
        instance:
          type: string
          format: uri
        properties:
          type: object
          additionalProperties:
            type: object
    AuthenticationRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      description: JWT auth description
      in: header
      scheme: bearer
      bearerFormat: JWT
